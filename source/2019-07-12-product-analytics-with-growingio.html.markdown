---

title: 使用 GrowingIO 搭建产品分析指标体系
date: 2019-07-12 12:00 +08:00
disqus_identifier: "product-analytics-with-growingio"
tags: product-analytics, growingio
keywords: 产品分析, 指标体系, growingio
---

<h2 id="overview">概述</h2>
我们评价一个产品的好坏，有两种方式。一可以用定性分析，比如用户拜访、调查问卷等。二可以用定量分析，从数据中发现使用情况。产品分析的指标体系搭建，核心就是为了通过定量分析了解用户是如何使用产品功能的，哪些是用户最常用的功能，哪些功能是最有粘性的功能，哪些功能带来更多的转化，新用户喜欢用什么功能，老用户在用什么功能，新上线的功能表现如何，等等。

![产品功能渗透率和使用率](product-analytics-with-growingio/product-analytics-sample.png)

比如，上面这张图，每一个圆代表一个产品功能，横轴是功能使用用户数，越在右边代表使用用户数越多。纵轴是人均使用功能次数，越上上面表示使用越高频。圆的大小是平均每次功能使用时长，圆越大代表单次功能使用时长越高。从这个图，就可以分析得出，对应某一个人群，功能的渗透率和使用率如何，哪些功能有潜力去推广，哪些功能是分发功能，等等。

本篇内容，主要介绍的是宏观层面的产品分析，不涉及分析具体某个具体产品功能，内部细节的转化数据，交互设计是否合理等。这些会在以后的文章中介绍。

<h2 id="customers">用好产品分析的客户例子</h2>

### 多元女性社区热拉
> GrowingIO 是我们的数据伙伴和导师，专业，敏捷，值得信赖。借助 GrowingIO 我们不断迭代产品，注册转化率提升 10%，功能留存率提升 30%，驱动用户持续增长。  
> —— 热拉 CEO 鲁磊  
通过 GrowingIO 的【留存魔法师】功能，热拉发现了一个和用户留存强相关的行为，使用过热拉「谁看过我」功能的用户留存度非常高。因此我们在产品迭代当中做了一个很小的改进。当一个用户访问你的时候，App 会给你发一条通知，留存率从 36.4% 提升到了 47.2%。

### 服装定制服务商 MatchU
> 在 MatchU，产品经理、运营和市场同学都会使用 GrowingIO 进行数据分析，真正做到了人人都是数据分析师。		  
> —— MatchU 联合创始人蔚馨  
MatchU 定制衬衫的下单转化过程中，由于新用户会对领型、袖型等信息感到疑惑，导致转化率偏低。产品经理通过 GrowingIO 快速定位问题，洞察用户心理，提出一系列“小白功能”改进产品方案，将加购率/购买成功率提升150%。

<h2 id="how-to">如何搭建指标体系</h2>

任何一个产品，都可以分成两大部分。用，即浏览功能。做，即创建功能。比如电商产品，浏览商品是浏览功能，下单购买是创建行为。对于内容产品，查看内容是浏览行为，创建内容是创建行为。所以，从指标体系搭建角度，我们也应该分成两部分来搭建，一部分是浏览类功能指标，一部分创建类功能指标。

对于浏览功能，一般而言，一个功能，会在某个页面上面，所以从产品角度考虑，功能使用大致等于页面访问。举个例子，你查看 GrowingIO 的某个漏斗，是在具体漏斗的详情页上。

对于创建功能，是在具体的某个交互触发的，所以从产品角度考虑，交互行为完成大致等于创建功能。举个例子，你在新建分布分析页面点击保存并成功返回时，就是使用了分布分析创建功能。

基于此，我们只需要用一个事件，两个变量。即可完成宏观层面的产品指标体系搭建。

| 指标名称 | 类型 | 标识符 |
| ----- | ----- | ----- |
| 产品交互性参与事件 | 埋点事件 | productEngage |
| 交互功能类型 | 事件级变量 | engageType |
| 交互功能页面名称 | 页面级变量 |  engagePage |

### 事件：产品交互性参与事件，标识符为 productEngage

什么叫事件？在 GrowingIO 的模型中，为了对用户行为进行统计和分析，我们使用一类被称为“事件”的消息来记录用户行为。一个事件，包含了用户信息、时间信息、行为信息、行为对象信息。

在产品分析里，我们用一个名为**productEngage**的事件，来监测用户使用产品过程中发生的创建行为。当创建成功后，发送这个事件并记录当前使用的创建功能是什么。拿 GrowingIO 来举个例子，当用户创建了一个分布分析图以后，我们就需要发送 _productEngage_ 事件。

### 事件级变量：交互功能类型，标识符为 engageType

事件级变量是对于一个事件更多的信息描述。在产品分析里，我们用一个名为**engageType**的变量，来描述用户使用的创建功能的类型信息，其值即当前使用的创建功能名称。还是拿 GrowingIO 来举个例子，当用户创建了一个分布分析图以后，我们在发送 _productEngage_ 事件的同时，设置事件级变量 _engageType_ 为“创建分布分析”。

### 页面级变量：交互功能页面名称，标识符为 engagePage

页面级变量是对于一个页面更多的信息描述。通过给当前页面附上更多的页面信息，可以作为维度拆分数据做分析。在上面提到，页面访问大致等于功能使用。所以，我们通过给页面设置变量，来记录用户当前交互的功能信息。当用户浏览某个功能即页面打开的时候，给当前页面设置上页面级变量，值为功能名称。仍然以 GrowingIO 为例子，当用户进入了活跃用户分析这个功能，我们在页面上设置页面级变量 _engagePage_ 为“主要功能-活跃用户分析”。

<h2 id="implementation">实施方式</h2>

如果上面的分析，适合你分析你自己的产品，那么下面我们就要进入实施阶段。要做好这个实施，需要产品经理和工程师之间通力的协作。有些公司，会有专门的数据产品经理，负责指标体系规划，跟研发沟通落地实施。有些公司，每个产品经理都需要掌握这个能力，遵循公司统一的指标体系方案，在每个产品文档里落地实施。这两种方式皆可，可以由公司当前的阶段而定，在后文里我会介绍。

简单来说，可以分成以下几步：

1. **规划**：纯从产品角度，规划一下目前这个阶段，要分析的功能有多少，哪些是浏览功能，哪些是创建功能。在这一步，交付物是产品功能说明文档。
2. **整理**：浏览功能，具体对应在什么页面，如果是多个平台比如 Web、iOS 等，是在哪些页面。创建功能，会在哪些情况下发生，列举出来。在这一步，交付物是数据采集说明文档。
3. **实施沟通**：根据数据采集说明文档，跟技术团队沟通埋点代码实现细节，每一个数据，采集的时间点和方式。在这一步，交付物是数据实施说明文档。
4. **开发测试**：技术团队根据数据实施说明文档做代码实现，交由 QA 或者产品经理做测试，最后上线。关于如何更好地测试实施正确与否，可以用 GrowingIO 的数据校验功能。

当实施完成后，我们就可以开始搭建可视化看板，再往上做数据洞察继而改进产品了。

PS：确保在 GrowingIO 的数据管理里面，已经创建好了埋点事件 _productEngage_，事件级变量 _engageType_，页面级变量 _engagePage_。具体用法可以参考[数据定义 - 帮助文档](https://docs.growingio.com/docs/data-definition/)。

### 实施代码样例

针对浏览功能的实施。当用户访问到某个功能页面时，在当前页面设置页面级变量。下面以 GrowingIO 为例。

```javascript
// Javascript
// 当用户使用活跃用户分析功能时，设置页面级变量。
gio("page.set", { engagePage: "主要功能-活跃用户分析" });

// iOS
// 当用户查看某个分布分析图详情时，设置页面级变量。
[Growing setPageVariable:@{@"engagePage":@"主要功能-分布分析详情页"} toViewController:myViewController];

// Android
// 当用户查看某个落地页分析详情时，设置页面级变量。
GrowingIO gio = GrowingIO.getInstance();
JSONObject jsonObject = new JSONObject();
jsonObject.put("engagePage", "主要功能-落地页分析详情页");
gio.setPageVariable(myActivity, jsonObject);

```

针对创建功能的实施。当用户创建成功时，采集功能创建事件。下面以 GrowingIO 为例。

```javascript
// JavaScript
// 当用户创建了一个用户分群时，打 productEngage 点。
gio("track", "productEngage", { engageType: "创建用户分群" });

// iOS
// 当用户创建了一条跟踪链接时，打 productEngage 点。
[Growing track:@"productEngage" withVariable:@{@"engageType":@"创建跟踪链接"}];

// Android
// 当用户创建了一个分布分析图时，打 productEngage 点。
GrowingIO gio = GrowingIO.getInstance();
JSONObject jsonObject = new JSONObject();
jsonObject.put("engageType", "创建分布分析");
gio.track("productEngage", jsonObject);
```

<h2 id="analytics">分析报表样例</h2>

一旦指标体系实施完成，就可以开始搭建产品分析可视化报表。下面是一些报表例子，供参考。

#### 浏览功能整体情况
 ![浏览功能整体情况](product-analytics-with-growingio/product-analytics-view.png)

通过横向柱图可以了解用户主要在用哪些浏览功能。通过事件分析，选择两个指标，即**页面浏览量**和**用户量**，选择维度为**交互功能页面名称**，选择用户分群为你想分析的人群，可以是全部登录用户，就出来上面这张图。其中，左边的图是浏览功能的使用次数，右边的图是浏览功能的使用人数。

#### 创建功能整体情况

![创建功能整体情况](product-analytics-with-growingio/product-analytics-create.png)

通过横向柱图可以了解用户主要在用哪些创建功能。通过事件分析，选择两个指标，即**产品交互性参与事件_次**和**产品交互性参与事件_人**，选择维度为**交互功能类型**，选择用户分群为你想分析的人群，可以是全部登录用户，就出来上面这张图。其中，左边的图是产品创建功能的使用次数，右边的图是产品创建功能的使用人数。

* 功能渗透率和使用率

![产品功能渗透率和使用率](product-analytics-with-growingio/product-analytics-sample.png)

通过气泡图可以了解核心功能的渗透率和使用率是怎样的，找到产品功能推广方向。通过事件分析，选择三个指标，即**用户数**、**人均浏览页数**和**平均页面停留时长(分钟)**，选择维度为**交互功能页面名称**，选择用户分群为你想分析的人群，可以是全部登录用户，就出来上面这张图。具体的解释可以看文档开头。

* 用户产品功能分布分析

![用户产品功能分布分析](product-analytics-with-growingio/product-analytics-distribution.png)

通过分布分析可以了解功能使用频率，结合使用率和渗透率来优化产品。通过分布分析，选择指标为页面浏览量，选择目标用户为你想分析的人群，可以是全部登录用户，在维度对比里面选择**交互功能页面名称**，就出来上面这张图。同时，可以通过自定义区间来设置你自己希望分析的区间，我们可以知道高频使用产品功能的用户的占比，低频使用功能的用户的占比，是否符合预期，后续就可以思考如何增加用户的使用频率。

<h2 id="ending">总结</h2>
以上就是一个宏观产品分析的指标体系搭建方案。数据分析的流程是以业务或产品为起点，定义指标体系，搭建看板，探索洞察，继而决策。大道至简，在定义指标体系的过程中，并不追求用很多个指标很多个维度，就如上面方案所列，一个指标两个变量，基本就能完成产品宏观分析的大多数工作。

少即是多，好的指标体系，才可以更好地为后续的分析洞察提供支撑。


<script type="text/javascript">
$(function() {
  var scrollTracker = new GrowingIOScrollTracker({
    event: 'scrollTrack',
    page: "使用 GrowingIO 搭建产品分析指标体系",
    markers: [
      { position: $("#overview").offset().top - 50,  value: '概述' },
      { position: $("#customers").offset().top - 50, value: '客户案例' },
      { position: $("#how-to").offset().top - 50, value: '指标体系搭建' },
      { position: $("#implementation").offset().top - 50, value: '实施方式' },
      { position: $("#analytics").offset().top - 50, value: '分析报表样例' },
      { position: $("#ending").offset().top - 50, value: '总结' }
    ]
  });
});
</script>

